// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feature {
  id          Int         @id @default(autoincrement())
  type        FeatureType
  name        String?
  description String
  effects     String[]
  appendix    String?

  community  Community?
  ancestry   Ancestry?  @relation(fields: [ancestryId], references: [name])
  ancestryId String?
  item       Item?
  weapon     Weapon?
  class      Class?     @relation(fields: [classId], references: [name])
  classId    String?
  subclass   Subclass?  @relation(fields: [subclassId], references: [name])
  subclassId String?

  armor Armor?
}

model Community {
  name      String  @id
  feature   Feature @relation(fields: [featureId], references: [id])
  featureId Int     @unique
}

model Ancestry {
  name     String    @id
  features Feature[]
}

model Item {
  id             Int      @id @default(autoincrement())
  name           String
  isStartingItem Boolean  @default(false)
  feature        Feature? @relation(fields: [featureId], references: [id])
  featureId      Int?     @unique
  class          Class?   @relation(fields: [classId], references: [name])
  classId        String?
}

model Weapon {
  id           Int      @id @default(autoincrement())
  name         String
  trait        Trait
  range        Range
  damage       String
  burden       Int
  feature      Feature? @relation(fields: [featureId], references: [id])
  featureId    Int?     @unique
  isMagical   Boolean
  isSecondary Boolean
  tier         Int
}

model Armor {
  id         Int      @id @default(autoincrement())
  name       String
  baseScore Int
  feature    Feature? @relation(fields: [featureId], references: [id])
  featureId  Int?     @unique
  tier       Int
}

model Class {
  name                 String     @id
  subclasses           Subclass[]
  domains              Domain[]
  evasionScore        Int
  majorThreshold      Int
  severeThreshold     Int
  items                Item[]
  features             Feature[]
  backgroundQuestions String[]
  connections          String[]
}

model Subclass {
  class           Class     @relation(fields: [originClass], references: [name])
  originClass    String
  name            String    @id
  spellcastTrait Trait?
  features        Feature[]
}

enum Domain {
  arcana
  blade
  bone
  codex
  grace
  midnight
  sage
  splendor
  valor
}

enum Trait {
  agility
  strength
  finesse
  instinct
  presence
  knowledge
}

enum Range {
  melee
  veryClose
  close
  far
  veryFar
}

enum FeatureType {
  classBase
  classHope
  ancestry
  community
  subclassFoundation
  subclassSpecialization
  subclassMastery
  domainCard
  armor
  weapon
  item
}
